2.1 API Endpoints
    Base URL: http://localhost:3000/api

    *  Test Home
        Endpoint: GET /
        Response:
        {
            "message": "Welcome to Augustus Task Manager!",
        }

    * Register User
        Endpoint: POST /auth/register
        Body:
        {
            "email": "user@example.com",
            "firstname": "First",
            "lastname": "Last",
            "password": "password"
        }

        Response:
        {
            "message": "User registered successfully",
            "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAZXhhbXBsZS5jb20iLCJpZCI6Ijh2aFRlVTFvemVXa1lXRWJLZWJpT1dDREZIbjEiLCJmaXJzdG5hbWUiOiJGaXJzdCIsImxhc3RuYW1lIjoiTGFzdCIsImlhdCI6MTcxNTkwMzE3NywiZXhwIjoxNzE1OTg5NTc3fQ.h0BQoY2S8DE-p9FAEnVzmdyc2LUord9fNGIFr3nfESI",
            "user": {
                "email": "user@example.com",
                "id": "8vhTeU1ozeWkYWEbKebiOWCDFHn1",
                "firstname": "First",
                "lastname": "Last"
            }
        }

    * Login User
        Endpoint: POST /auth/login
        Body:
        {
            "email": "user@example.com",
            "password": "password123"
        }

        Response:
        {
            "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmaXJzdG5hbWUiOiJGaXJzdCIsImlkIjoiQ2VHWWdSZmJKQ1d6UzdjdFVvQzhJUGpRck1vMSIsImVtYWlsIjoidXNlckBleGFtcGxlLmNvbSIsImxhc3RuYW1lIjoiTGFzdCIsImlhdCI6MTcxNTkwNDAzMywiZXhwIjoxNzE1OTkwNDMzfQ.cf5N_WCLXeHzBS89I0i7b9-azlEOHgKTbVlGTLjfEHA",
            "user": {
                "firstname": "First",
                "id": "CeGYgRfbJCWzS7ctUoC8IPjQrMo1",
                "email": "user@example.com",
                "lastname": "Last"
            }
        }



    1. Create Task
        Endpoint: POST /tasks
        Headers: Authorization: Bearer <token>
        Body:
        {
            "title": "My First Task",
            "description": "My First Task Description",
            "completed": false
        }
        Response:
        {
            "id": "hMkmMw8CWvzeQC7AMfRJ",
            "title": "My First Task",
            "description": "My First Task Description",
            "completed": false,
            "userId": "CeGYgRfbJCWzS7ctUoC8IPjQrMo1"
        }


    2. Get User Tasks
        Endpoint: GET /tasks
        Headers: Authorization: Bearer <token>
        Response:
        [
            {
                "id": "hMkmMw8CWvzeQC7AMfRJ",
                "description": "My First Task Description",
                "completed": false,
                "title": "My First Task",
                "userId": "CeGYgRfbJCWzS7ctUoC8IPjQrMo1"
            }
        ]


    3. Get Task by ID
        Endpoint: GET /tasks/:id
        Headers: Authorization: Bearer <token>
        Response:
        {
            "id": "hMkmMw8CWvzeQC7AMfRJ",
            "description": "My First Task Description",
            "completed": false,
            "title": "My First Task",
            "userId": "CeGYgRfbJCWzS7ctUoC8IPjQrMo1"
        }


    4. Update Task
        Endpoint: PUT /tasks/:id
        Headers: Authorization: Bearer <token>
        Body:
        {
            "title": "Updated My First Task",
            "description": "Updated My First Task Description",
            "completed": true
        }

        Response:
        {
            "message": "Task updated successfully."
        }


    5. Delete Task
        Endpoint: DELETE /tasks/:id
        Headers: Authorization: Bearer <token>
        Response:
        {
            "message": "Task deleted successfully."
        }



2.2 Data Models
    User:
    export interface User {
        id: string;
        firstname: string;
        lastname: string;
        email: string;
        password: string;
    }

    Task:
    export interface Task {
        id?: string;
        title: string;
        description: string;
        userId: string;
        completed: boolean;
    }

2.3 Other Relevant Information
    1.  JWT Authentication
        - Used JWT tokens for user authentication.
        - Include the token in the Authorization header as Bearer <token> for all authenticated endpoints.
    
    2.  Input Validation
        - DTO classes ensure that the input data is valid.
        - Use decorators like @IsString(), @IsNotEmpty(), @IsBoolean(), and @IsOptional() for input validation.


3. Environment Variables
    - Create a .env file in the project root with the following:
    JWT_SECRET=augustus_secret_key
